# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, TAG images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  batch: true
  branches:
    include:
      - master

pr:
  autoCancel: true
  branches:
    include:
      - master
  paths:
    exclude:
      - pipelines

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureContainerRegistry: prescryptivecontainerregistry.azurecr.io
  azureSubscriptionEndpoint: rg-service-connection-rg-registry-prescryptivehealth-centralus-prod

  BASE: prescryptive-ux-experiences/
  BUILDID: $(Build.BuildNumber)
  MAJOR_VERSION: 1
  REGISTRY: $(azureContainerRegistry)/
  TAG: $(MAJOR_VERSION).$(BUILDID)
  USERNAME: ci

  Root.path: $(System.DefaultWorkingDirectory)
  Api.image: guest-member-api:$(TAG)
  Api.path: $(Root.path)/packages/guest-member-api
  Api.container: api-container-$(BUILDID)

  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: 16.13.2

  - task: npmAuthenticate@0
    inputs:
      workingFile: .npmrc
    condition: succeeded()

  - script: |
      npm install -g yarn
    displayName: 'install Yarn'
    failOnStderr: true
    continueOnError: false

  - script: |
      yarn global add expo-cli@6.1.0
    displayName: 'install Expo CLI'
    failOnStderr: false
    continueOnError: false

  - task: Cache@2
    inputs:
      key: '"yarn" | "$(Agent.OS)" | **/yarn.lock'
      path: $(YARN_CACHE_FOLDER)
      cacheHitVar: CACHE_RESTORED
    displayName: Cache Yarn packages
    condition: succeeded()

  ############################ INSTALL DEPENDENCIES

  - script: |
      yarn setup:options
    displayName: 'install dependencies'
    workingDirectory: .
    condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
    continueOnError: false

  - script: |
      npx audit-ci --config ./audit-ci.jsonc
    displayName: 'Perform audit check'
    workingDirectory: .
    continueOnError: false

    ############################ BUILD

  - script: |
      yarn build:ci
    displayName: 'build - api'
    env:
      NODE_OPTIONS: --max-old-space-size=2048
    workingDirectory: ./packages/guest-member-api
    condition: succeeded()
    continueOnError: false

  - script: |
      yarn web:build
    displayName: 'build - web'
    workingDirectory: ./packages/myrx
    condition: succeeded()
    continueOnError: false

  - task: CopyFiles@2
    inputs:
      sourceFolder: ./packages/myrx/web-build
      targetFolder: ./pipelines/build
    condition: succeeded()
    continueOnError: false

  - script: |
      yarn storybook:build
    displayName: 'build - storybook'
    workingDirectory: ./packages/common
    condition: succeeded()
    continueOnError: false

  - task: CopyFiles@2
    inputs:
      sourceFolder: ./packages/common/storybook-static
      targetFolder: ./pipelines/storybook-static
    condition: succeeded()
    continueOnError: false

  ############################ BUILD AND PUSH API IMAGE

  - task: Docker@1
    displayName: Container registry login
    inputs:
      command: login
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureContainerRegistry: $(azureContainerRegistry)
    condition: succeeded()
    continueOnError: false

  - script: |
      docker image build -t $(Api.image) .
    displayName: build image - api
    workingDirectory: ./packages/guest-member-api
    condition: succeeded()
    failOnStderr: true
    continueOnError: false

  - script: |
      docker tag $(Api.image) $(azureContainerRegistry)/$(BASE)$(Api.image)
    displayName: tag the image
    condition: succeeded()
    failOnStderr: true
    continueOnError: false

  - script: |
      docker push $(azureContainerRegistry)/$(BASE)$(Api.image)
    displayName: push image - api
    failOnStderr: true
    continueOnError: false

  - task: Docker@1
    displayName: Container registry logout
    inputs:
      command: logout
      azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
      azureContainerRegistry: $(azureContainerRegistry)
    condition: always()

  ############################ PUBLISH ARTIFACTS

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: BuildScripts
      targetPath: pipelines
    condition: succeeded()
