// Copyright 2018 Prescryptive Health, Inc.

import React from 'react';
import { Text, View } from 'react-native';
import renderer from 'react-test-renderer';
import { ContactInfoContainer } from '../../../components/member/contact-info-container/contact-info-container';
import { IBasicPageProps } from '../../../components/pages/basic-page';
import { BasicPageConnected } from '../../../components/pages/basic-page-connected';
import {
  IDependentProfile,
  ILimitedAccount,
  IPrimaryProfile,
  IProfile,
  RxGroupTypesEnum,
} from '../../../models/member-profile/member-profile-info';
import { MemberListInfoScreen } from './member-list-info-screen';
import { memberInfoListScreenContent } from './member-list-info-screen.content';
import { useNavigation } from '@react-navigation/native';
import { useMembershipContext } from '../context-providers/membership/use-membership-context.hook';
import { rootStackNavigationMock } from '../navigation/stack-navigators/root/__mocks__/root.stack-navigation.mock';
import { memberListInfoScreenStyles } from './member-list-info-screen.styles';
import { ILimitedPatient } from '../../../models/patient-profile/limited-patient';
import {
  IActiveExpiredPatientsResponse,
  IPatientDependentsResponse,
  IPatientProfileResponse,
} from '../../../models/patient-profile/patient-profile';

jest.mock('@react-navigation/native');
const useNavigationMock = useNavigation as jest.Mock;

jest.mock('../context-providers/membership/use-membership-context.hook');
const useMembershipContextMock = useMembershipContext as jest.Mock;

jest.mock(
  '../../../components/member/contact-info-container/contact-info-container',
  () => ({
    ContactInfoContainer: () => <div />,
  })
);

jest.mock('../../../components/pages/basic-page-connected', () => ({
  BasicPageConnected: () => <div />,
}));

jest.mock(
  '../../../components/member/lists/home-feed-list/home-feed-list.connected'
);

const adultMembersMock: IDependentProfile[] = [
  {
    firstName: 'adult-first-name',
    lastName: 'adult-last-name',
    identifier: 'adult-identifier',
    isLimited: true,
    isPrimary: false,
    rxSubGroup: 'CASH01',
  },
];

const childMembersMock: IDependentProfile[] = [
  {
    firstName: 'child-first-name',
    lastName: 'child-last-name',
    identifier: 'child-identifier',
    isLimited: false,
    isPrimary: false,
    rxSubGroup: 'CASH01',
    primaryMemberRxId: 'child-primary-member-rx-id',
    secondaryAlertChildCareTakerIdentifier: 'adult-identifier',
  },
];

const loggedInMemberMock: IPrimaryProfile = {
  firstName: 'first-name',
  lastName: 'last-name',
  dateOfBirth: 'date-of-birth',
  email: 'email',
  phoneNumber: 'phone-number',
  identifier: 'identifier',
  primaryMemberRxId: 'primary-member-rx-id',
  isPrimary: true,
  rxGroupType: 'SIE',
  rxSubGroup: 'rx-sub-group',
};

const memberProfileNameMock = `${loggedInMemberMock.firstName} ${loggedInMemberMock.lastName}`;

const accountMock: ILimitedAccount = {
  firstName: loggedInMemberMock.firstName,
  lastName: loggedInMemberMock.lastName,
  phoneNumber: loggedInMemberMock.phoneNumber,
  recoveryEmail: loggedInMemberMock.email,
  dateOfBirth: loggedInMemberMock.dateOfBirth,
  favoritedPharmacies: [],
};

const primaryMock: IPrimaryProfile = loggedInMemberMock;

const profileListMock: IProfile[] = [
  {
    primary: primaryMock,
    rxGroupType: primaryMock.rxGroupType,
    childMembers: childMembersMock,
    adultMembers: adultMembersMock,
  },
];

describe('createContactRowKey', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    useNavigationMock.mockReturnValue(rootStackNavigationMock);
    useMembershipContextMock.mockReturnValue({
      membershipState: { account: accountMock, profileList: profileListMock },
    });
  });
  it('should return a key generated by combination of emailId and phoneNumber', () => {
    renderer.create(<MemberListInfoScreen />);

    const row = primaryMock;

    const key = `${row?.identifier} ${row?.firstName}-${row?.lastName}`;

    expect(key).toBe(`identifier first-name-last-name`);
  });
});

describe('MemberListInfoScreen ', () => {
  it('should render ContactInfoContainer with proper props and set secondaryUserName id secondaryAlertChildCareTakerIdentifier | secondaryAlertCarbonCopyIdentifier is present', () => {
    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;

    expect(body.type).toEqual(View);
    expect(body.props.style).toEqual(memberListInfoScreenStyles.containerView);
    expect(body.props.children.length).toEqual(2);

    const loggedInUserRow = body.props.children[0];

    expect(loggedInUserRow.type).toEqual(View);
    expect(loggedInUserRow.props.style).toEqual(
      memberListInfoScreenStyles.rowContainerView
    );

    const contactInfoContainer1 = loggedInUserRow.props.children;

    expect(contactInfoContainer1.type).toEqual(ContactInfoContainer);
    expect(contactInfoContainer1.props.memberInfo).toEqual(primaryMock);

    expect(contactInfoContainer1.props.isAdult).toEqual(true);
    expect(contactInfoContainer1.props.secondaryUser).not.toBeDefined();

    const renderChildMembers = body.props.children[1];

    expect(renderChildMembers.type).toEqual(View);
    expect(renderChildMembers.props.style).toEqual(
      memberListInfoScreenStyles.childContainerView
    );
    expect(renderChildMembers.props.children.length).toEqual(2);

    const text1 = renderChildMembers.props.children[0];
    expect(text1.type).toEqual(Text);
    expect(text1.props.style).toEqual(
      memberListInfoScreenStyles.childContainerViewHeaderText
    );
    expect(text1.props.children).toEqual(
      memberInfoListScreenContent.dependentMembersUnder13
    );

    const childMember1 = renderChildMembers.props.children[1][0];
    expect(childMember1.type).toEqual(View);
    expect(childMember1.props.style).toEqual(
      memberListInfoScreenStyles.rowContainerView
    );

    const childMember1Contact = childMember1.props.children;
    expect(childMember1Contact.type).toEqual(ContactInfoContainer);
    expect(childMember1Contact.props.memberInfo).toEqual({
      ...childMembersMock[0],
      rxGroupType: 'SIE',
    });
    expect(childMember1Contact.props.isAdult).toEqual(false);
    expect(childMember1Contact.props.secondaryUser).toEqual(
      adultMembersMock[0]
    );
  });

  it('should have a BasicPageConnected with props', () => {
    const memberListInfoScreen = renderer.create(<MemberListInfoScreen />);
    const basicPage = memberListInfoScreen.root.findByType(BasicPageConnected);
    const pageProps = basicPage.props as IBasicPageProps;
    expect(pageProps.header).toBeUndefined();
    expect(pageProps.body).toBeDefined();
    expect(pageProps.hideNavigationMenuButton).toBeFalsy();
    expect(pageProps.showProfileAvatar).toBeTruthy();
    expect(pageProps.memberProfileName).toBe(memberProfileNameMock);
    expect(pageProps.translateContent).toBe(true);
  });

  it('should verify that navigateBack is set to goBack', () => {
    const memberListInfoScreen = renderer.create(<MemberListInfoScreen />);
    const basicPage = memberListInfoScreen.root.findByType(BasicPageConnected);
    const pageProps = basicPage.props as IBasicPageProps;
    expect(pageProps.navigateBack).toBe(rootStackNavigationMock.goBack);
  });

  it('should render seprating bar if the loggedIn member is primary and child members are present', () => {
    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;
    const renderChildMembers = body.props.children[1];
    const text1 = renderChildMembers.props.children[0];
    expect(text1.props.children).toEqual(
      memberInfoListScreenContent.dependentMembersUnder13
    );
  });

  it('should not render seprating bar if the loggedIn member is not primary', () => {
    const notPrimaryAccount: ILimitedAccount = {
      phoneNumber: 'not-primary-phone-number',
      firstName: 'not-primary-first-name',
      lastName: 'not-primary-last-name',
      recoveryEmail: 'not-primary-recovery-email',
      favoritedPharmacies: [],
    };
    const notPrimaryMember: IPrimaryProfile = {
      email: 'not-primary-email',
      firstName: 'not-primary-first-name',
      identifier: 'not-primary-identifier',
      isPrimary: false,
      lastName: 'not-primary-last-name',
      phoneNumber: 'not-primary-phone-number',
      primaryMemberRxId: 'not-primary-primary-member-rx-id',
      rxGroupType: 'SIE',
      rxSubGroup: 'HMA01',
      dateOfBirth: 'not-primary-date-of-birth',
    };
    const notPrimaryProfileList: IProfile[] = [
      {
        primary: notPrimaryMember,
        rxGroupType: notPrimaryMember.rxGroupType,
        childMembers: childMembersMock,
        adultMembers: adultMembersMock,
      },
    ];
    useMembershipContextMock.mockClear();
    useMembershipContextMock.mockReturnValue({
      membershipState: {
        account: notPrimaryAccount,
        profileList: notPrimaryProfileList,
      },
    });

    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;
    const renderChildMembers = body.props.children[1];
    expect(renderChildMembers).toBeNull();
  });

  it('should not render separating bar if the loggedIn member is primary but there is no child members', () => {
    const isPrimaryAccount: ILimitedAccount = {
      phoneNumber: 'is-primary-phone-number',
      firstName: 'is-primary-first-name',
      lastName: 'is-primary-last-name',
      recoveryEmail: 'is-primary-recovery-email',
      favoritedPharmacies: [],
    };
    const isPrimaryMember: IPrimaryProfile = {
      email: 'is-primary-email',
      firstName: 'is-primary-first-name',
      identifier: 'is-primary-identifier',
      isPrimary: false,
      lastName: 'is-primary-last-name',
      phoneNumber: 'is-primary-phone-number',
      primaryMemberRxId: 'is-primary-primary-member-rx-id',
      rxGroupType: 'SIE',
      rxSubGroup: 'HMA01',
      dateOfBirth: 'is-primary-date-of-birth',
    };
    const isPrimaryProfileList: IProfile[] = [
      {
        primary: isPrimaryMember,
        rxGroupType: isPrimaryMember.rxGroupType,
        childMembers: [],
        adultMembers: adultMembersMock,
      },
    ];
    useMembershipContextMock.mockClear();
    useMembershipContextMock.mockReturnValue({
      membershipState: {
        account: isPrimaryAccount,
        profileList: isPrimaryProfileList,
      },
    });
    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;
    const renderChildMembers = body.props.children[1];
    expect(renderChildMembers).toBeNull();
  });

  it('should send rxGroupType of primary for dependents to edit member profile screen', () => {
    const primaryCashPrimaryProfile: IPrimaryProfile = {
      email: 'email',
      firstName: 'first-name',
      identifier: 'identifier',
      isPrimary: true,
      lastName: 'last-name',
      phoneNumber: 'phone-number',
      primaryMemberRxId: 'primary-member-rx-id',
      rxGroupType: 'SIE',
      dateOfBirth: 'date-of-birth',
      rxSubGroup: 'rx-sub-group',
    };

    const primaryCashProfile: IProfile = {
      rxGroupType: 'SIE',
      primary: primaryCashPrimaryProfile,
      childMembers: childMembersMock,
      adultMembers: adultMembersMock,
    };

    const primaryCashProfileList: IProfile[] = [primaryCashProfile];

    const primaryCashAccount: ILimitedAccount = {
      phoneNumber: 'cash-primary-phone-number',
      firstName: 'cash-primary-first-name',
      lastName: 'cash-primary-last-name',
      recoveryEmail: 'cash-primary-recovery-email',
      favoritedPharmacies: [],
    };

    useMembershipContextMock.mockClear();
    useMembershipContextMock.mockReturnValue({
      membershipState: {
        account: primaryCashAccount,
        profileList: primaryCashProfileList,
      },
    });
    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;

    expect(body.type).toEqual(View);
    expect(body.props.style).toEqual(memberListInfoScreenStyles.containerView);
    expect(body.props.children.length).toEqual(2);

    const renderChildMembers = body.props.children[1];

    expect(renderChildMembers.type).toEqual(View);
    expect(renderChildMembers.props.style).toEqual(
      memberListInfoScreenStyles.childContainerView
    );
    expect(renderChildMembers.props.children.length).toEqual(2);

    const text1 = renderChildMembers.props.children[0];
    expect(text1.type).toEqual(Text);
    expect(text1.props.style).toEqual(
      memberListInfoScreenStyles.childContainerViewHeaderText
    );
    expect(text1.props.children).toEqual(
      memberInfoListScreenContent.dependentMembersUnder13
    );

    const childMember1 = renderChildMembers.props.children[1][0];
    expect(childMember1.type).toEqual(View);
    expect(childMember1.props.style).toEqual(
      memberListInfoScreenStyles.rowContainerView
    );

    const childMember1Contact = childMember1.props.children;
    expect(childMember1Contact.type).toEqual(ContactInfoContainer);
    expect(childMember1Contact.props.memberInfo).toEqual({
      ...childMembersMock[0],
      rxGroupType: 'SIE',
    });
  });

  it('should not display secondary members if the loggedIn member is only a cash user ', () => {
    const cashProfileChildDependents: IDependentProfile[] = [
      {
        email: 'child-email-1',
        firstName: 'child-first-name-1',
        identifier: 'child-identifier-1',
        isLimited: false,
        isPhoneNumberVerified: false,
        isPrimary: false,
        lastName: 'child-last-name-1',
        phoneNumber: '',
        primaryMemberFamilyId: 'family-id',
        primaryMemberPersonCode: '03',
        primaryMemberRxId: 'child-primary-member-rx-id-1',
        rxSubGroup: 'CASH01',
        age: 4,
      } as IDependentProfile,

      {
        email: 'child-email-2',
        firstName: 'child-first-name-2',
        identifier: 'child-identifier-2',
        isLimited: false,
        isPhoneNumberVerified: false,
        isPrimary: false,
        lastName: 'child-last-name-2',
        phoneNumber: '',
        primaryMemberFamilyId: 'family-id',
        primaryMemberPersonCode: '03',
        primaryMemberRxId: 'child-primary-member-rx-id-2',
        rxSubGroup: 'CASH01',
        age: 4,
      } as IDependentProfile,
    ];

    const cashProfileAdultDependents: IDependentProfile[] = [
      {
        email: 'adult-email-1',
        firstName: 'adult-first-name-1',
        identifier: 'adult-identifier-1',
        isLimited: false,
        isPhoneNumberVerified: false,
        isPrimary: false,
        lastName: 'adult-last-name-1',
        phoneNumber: '',
        primaryMemberFamilyId: 'family-id',
        primaryMemberPersonCode: '05',
        primaryMemberRxId: 'adult-primary-member-rx-id-1',
        rxSubGroup: 'CASH01',
        age: 18,
      } as IDependentProfile,
      {
        email: 'adult-email-2',
        firstName: 'adult-first-name-2',
        identifier: 'adult-identifier-2',
        isLimited: false,
        isPhoneNumberVerified: false,
        isPrimary: false,
        lastName: 'adult-last-name-2',
        phoneNumber: '',
        primaryMemberFamilyId: 'family-id',
        primaryMemberPersonCode: '03',
        primaryMemberRxId: 'adult-primary-member-rx-id-2',
        rxSubGroup: 'CASH01',
        age: 13,
      } as IDependentProfile,
    ];

    const primaryCashPrimaryProfile: IPrimaryProfile = {
      email: 'email',
      firstName: 'first-name',
      identifier: 'identifier',
      isLimited: false,
      isPhoneNumberVerified: true,
      isPrimary: true,
      lastName: 'last-name',
      phoneNumber: 'phone-number',
      primaryMemberFamilyId: 'primary-member-family-id',
      primaryMemberPersonCode: '01',
      primaryMemberRxId: 'primary-member-rx-id',
      age: 33,
      dateOfBirth: 'date-of-birth',
      rxGroupType: 'CASH',
      rxSubGroup: 'rx-sub-group',
    };

    const primaryCashProfile: IProfile = {
      rxGroupType: 'CASH',
      primary: primaryCashPrimaryProfile,
      childMembers: cashProfileChildDependents,
      adultMembers: cashProfileAdultDependents,
    };

    const primaryCashProfileList: IProfile[] = [primaryCashProfile];

    const primaryCashAccount: ILimitedAccount = {
      phoneNumber: 'cash-primary-phone-number',
      firstName: 'cash-primary-first-name',
      lastName: 'cash-primary-last-name',
      recoveryEmail: 'cash-primary-recovery-email',
      favoritedPharmacies: [],
    };

    useMembershipContextMock.mockClear();
    useMembershipContextMock.mockReturnValue({
      membershipState: {
        account: primaryCashAccount,
        profileList: primaryCashProfileList,
      },
    });

    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;

    const bodyRenderer = renderer.create(body);

    const contactInfoContainer =
      bodyRenderer.root.findAllByType(ContactInfoContainer);
    expect(contactInfoContainer.length).toBe(1);

    const text = bodyRenderer.root.findAllByType(Text);

    expect(text[9]).toBeUndefined();
  });

  it('renders member info from patientList for v2 version', () => {
    const isPrimaryAccount: ILimitedAccount = {
      phoneNumber: 'is-primary-phone-number',
      firstName: 'is-primary-first-name',
      lastName: 'is-primary-last-name',
      recoveryEmail: 'is-primary-recovery-email',
      favoritedPharmacies: [],
    };
    const isPrimaryMember: IPrimaryProfile = {
      email: 'is-primary-email',
      firstName: 'is-primary-first-name',
      identifier: 'is-primary-identifier',
      isPrimary: false,
      lastName: 'is-primary-last-name',
      phoneNumber: 'is-primary-phone-number',
      primaryMemberRxId: 'is-primary-primary-member-rx-id',
      rxGroupType: 'SIE',
      rxSubGroup: 'HMA01',
      dateOfBirth: 'is-primary-date-of-birth',
    };
    const isPrimaryProfileList: IProfile[] = [
      {
        primary: isPrimaryMember,
        rxGroupType: isPrimaryMember.rxGroupType,
        childMembers: [],
        adultMembers: adultMembersMock,
      },
    ];

    const patientProfileResponseMock = {
      rxGroupType: RxGroupTypesEnum.CASH,
      primary: {
        firstName: 'first-name',
        lastName: 'last-name',
        dateOfBirth: '2000-01-01',
        phoneNumber: '+11111111111',
        recoveryEmail: 'email',
        memberId: 'member-id-mock',
        masterId: 'master-id-mock',
        rxGroupType: 'CASH',
        rxSubGroup: 'rx-sub-group',
      } as ILimitedPatient,
    } as IPatientProfileResponse;

    const patientListMock = [patientProfileResponseMock];

    const loggedInMemberMock = {
      firstName: patientProfileResponseMock.primary.firstName,
      lastName: patientProfileResponseMock.primary.lastName,
      phoneNumber: patientProfileResponseMock.primary.phoneNumber,
      email: patientProfileResponseMock.primary.recoveryEmail,
      dateOfBirth: patientProfileResponseMock.primary.dateOfBirth,
      primaryMemberRxId: patientProfileResponseMock.primary.memberId,
      masterId: patientProfileResponseMock.primary.masterId,
      isPrimary: true,
      rxGroupType: patientProfileResponseMock.primary.rxGroupType,
      rxSubGroup: patientProfileResponseMock.primary.rxSubGroup,
    } as IPrimaryProfile;

    const primaryMock: IPrimaryProfile = loggedInMemberMock;

    const childPatientDependentCASHMock = {
      firstName: 'first-name',
      lastName: 'last-name',
      dateOfBirth: '2020-01-01',
      phoneNumber: '+11111111111',
      recoveryEmail: 'email',
      memberId: 'member-id-mock',
      masterId: 'master-id-mock',
      rxGroupType: 'CASH',
      rxSubGroup: 'rx-sub-group',
    } as ILimitedPatient;

    const adultPatientDependentCASHMock = {
      firstName: 'first-name',
      lastName: 'last-name',
      dateOfBirth: '2000-01-01',
      phoneNumber: '+11111111111',
      recoveryEmail: 'email',
      memberId: 'member-id-mock',
      masterId: 'master-id-mock',
      rxGroupType: 'CASH',
      rxSubGroup: 'rx-sub-group',
    } as ILimitedPatient;

    const childPatientDependentSIEMock = {
      firstName: 'first-name',
      lastName: 'last-name',
      dateOfBirth: '2020-01-01',
      phoneNumber: '+11111111111',
      recoveryEmail: 'email',
      memberId: 'member-id-mock',
      masterId: 'master-id-mock',
      rxGroupType: 'SIE',
      rxSubGroup: 'rx-sub-group',
    } as ILimitedPatient;

    const adultPatientDependentSIEMock = {
      firstName: 'first-name',
      lastName: 'last-name',
      dateOfBirth: '2000-01-01',
      phoneNumber: '+11111111111',
      recoveryEmail: 'email',
      memberId: 'member-id-mock',
      masterId: 'master-id-mock',
      rxGroupType: 'SIE',
      rxSubGroup: 'rx-sub-group',
    } as ILimitedPatient;

    const childActiveExpiredPatientCASHMock = {
      activePatients: [childPatientDependentCASHMock],
      expiredPatients: [],
    } as IActiveExpiredPatientsResponse;

    const adultActiveExpiredPatientCASHMock = {
      activePatients: [adultPatientDependentCASHMock],
      expiredPatients: [],
    } as IActiveExpiredPatientsResponse;

    const childActiveExpiredPatientSIEMock = {
      activePatients: [childPatientDependentSIEMock],
      expiredPatients: [],
    } as IActiveExpiredPatientsResponse;

    const adultActiveExpiredPatientSIEMock = {
      activePatients: [adultPatientDependentSIEMock],
      expiredPatients: [],
    } as IActiveExpiredPatientsResponse;

    const patientDependentsResponseMock1 = {
      rxGroupType: RxGroupTypesEnum.CASH,
      childMembers: childActiveExpiredPatientCASHMock,
      adultMembers: adultActiveExpiredPatientCASHMock,
    } as IPatientDependentsResponse;

    const patientDependentsResponseMock2 = {
      rxGroupType: RxGroupTypesEnum.SIE,
      childMembers: childActiveExpiredPatientSIEMock,
      adultMembers: adultActiveExpiredPatientSIEMock,
    } as IPatientDependentsResponse;

    const patientDependentsMock = [
      patientDependentsResponseMock1,
      patientDependentsResponseMock2,
    ];

    useMembershipContextMock.mockClear();
    useMembershipContextMock.mockReturnValue({
      membershipState: {
        account: isPrimaryAccount,
        profileList: isPrimaryProfileList,
        patientList: patientListMock,
        patientDependents: patientDependentsMock,
      },
    });

    const testRenderer = renderer.create(<MemberListInfoScreen />);

    const basicPage = testRenderer.root.findByType(BasicPageConnected);
    const body = basicPage.props.body;

    const loggedInUserRow = body.props.children[0];

    expect(loggedInUserRow.type).toEqual(View);
    expect(loggedInUserRow.props.style).toEqual(
      memberListInfoScreenStyles.rowContainerView
    );

    const contactInfoContainer1 = loggedInUserRow.props.children;

    expect(contactInfoContainer1.type).toEqual(ContactInfoContainer);
    expect(contactInfoContainer1.props.memberInfo).toEqual(primaryMock);

    expect(contactInfoContainer1.props.isAdult).toEqual(true);
    expect(contactInfoContainer1.props.secondaryUser).not.toBeDefined();

    const renderChildMembers = body.props.children[1];
    expect(renderChildMembers).toBeNull();
  });
});
